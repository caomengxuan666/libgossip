name: Publish Python Bindings to PyPI

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    env:
      CIBW_BUILD_FRONTEND: build
      CIBW_SKIP: "*-win32 *-manylinux_i686 pp*"
      CIBW_BUILD_VERBOSITY: 1

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'pyproject.toml', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine pybind11==2.13.6

      - name: Debug information
        shell: bash
        run: |
          echo "Python version:"
          python --version
          echo "Directory structure:"
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmd //c "dir"
          else
            ls -la
          fi
          echo "Submodules status:"
          git submodule status
          echo "Pybind11 version:"
          python -c "import pybind11; print(pybind11.__version__)"

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v2.16.5
        with:
          package-dir: bindings/python
        env:
          CIBW_ENVIRONMENT: >
            ASIO_STANDALONE=1
            ASIO_NO_TYPEID=1

      - name: Check wheel metadata
        run: |
          twine check wheelhouse/*.whl

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'pyproject.toml', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine pybind11==2.13.6

      - name: Debug information
        run: |
          echo "Python version:"
          python --version
          echo "Directory structure:"
          ls -la
          echo "Submodules status:"
          git submodule status
          echo "Pybind11 version:"
          python -c "import pybind11; print(pybind11.__version__)"

      - name: Build sdist
        run: |
          cd bindings/python
          python -m build --sdist
          twine check dist/*.tar.gz

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: bindings/python/dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    environment: pypi
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'pyproject.toml', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Install twine and latest pkginfo
        run: |
          pip install --upgrade twine pkginfo==1.10.0

      - name: Verify package metadata
        run: |
          twine check dist/*

      - name: Publish to Test PyPI
        run: |
          twine upload --verbose --repository-url https://test.pypi.org/legacy/ dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          twine upload --verbose --repository-url https://upload.pypi.org/legacy/ dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}